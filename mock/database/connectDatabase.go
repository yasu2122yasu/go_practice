// Code generated by MockGen. DO NOT EDIT.
// Source: database/connectDatabase.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConnectDatabase is a mock of IConnectDatabase interface.
type MockIConnectDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectDatabaseMockRecorder
}

// MockIConnectDatabaseMockRecorder is the mock recorder for MockIConnectDatabase.
type MockIConnectDatabaseMockRecorder struct {
	mock *MockIConnectDatabase
}

// NewMockIConnectDatabase creates a new mock instance.
func NewMockIConnectDatabase(ctrl *gomock.Controller) *MockIConnectDatabase {
	mock := &MockIConnectDatabase{ctrl: ctrl}
	mock.recorder = &MockIConnectDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectDatabase) EXPECT() *MockIConnectDatabaseMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIConnectDatabase) Connect() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockIConnectDatabaseMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIConnectDatabase)(nil).Connect))
}
